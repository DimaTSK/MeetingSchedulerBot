package meetingschedulerbot.bot;

import meetingschedulerbot.config.BotConfig;
import meetingschedulerbot.model.DateOption;
import meetingschedulerbot.model.Meeting;
import meetingschedulerbot.model.UserState;
import meetingschedulerbot.service.MeetingService;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class MeetingSchedulerBot extends TelegramLongPollingBot {
    private final MeetingService meetingService;
    private final BotConfig config;

    private static final String HELP_TEXT = """
        –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á! –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
        
        /newmeeting - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É
        /mymeetings - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏
        /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏:
        1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newmeeting
        2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
        3. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º
        4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞—Ç—ã
        5. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å ID –≤—Å—Ç—Ä–µ—á–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        
        –î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:
        1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /vote ID_–í–°–¢–†–ï–ß–ò
        2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç
        """;

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ç–æ–∫–µ–Ω–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å
    public MeetingSchedulerBot(BotConfig config, MeetingService meetingService) {
        super(config.getBotToken());
        this.config = config;
        this.meetingService = meetingService;
    }

    @Override
    public String getBotUsername() {
        return config.getBotUsername();
    }

    @Override
    public void onUpdateReceived(Update update) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String userId = update.getMessage().getFrom().getId().toString();
            String username = update.getMessage().getFrom().getUserName() != null
                    ? update.getMessage().getFrom().getUserName()
                    : update.getMessage().getFrom().getFirstName();

            UserState userState = meetingService.getUserState(userId);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageText.startsWith("/")) {
                handleCommand(chatId, userId, username, messageText, userState);
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                handleMessageByState(chatId, userId, username, messageText, userState);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            String userId = update.getCallbackQuery().getFrom().getId().toString();
            String username = update.getCallbackQuery().getFrom().getUserName() != null
                    ? update.getCallbackQuery().getFrom().getUserName()
                    : update.getCallbackQuery().getFrom().getFirstName();

            handleCallback(chatId, userId, username, callbackData);
        }
    }

    private void handleCommand(long chatId, String userId, String username, String command, UserState userState) {
        if (command.equals("/start") || command.equals("/help")) {
            sendMessage(chatId, HELP_TEXT);
            meetingService.setUserState(userId, UserState.State.NONE, null);
        } else if (command.equals("/newmeeting")) {
            sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:");
            meetingService.setUserState(userId, UserState.State.AWAITING_MEETING_TITLE, null);
        } else if (command.equals("/mymeetings")) {
            showUserMeetings(chatId, userId);
        } else if (command.equals("/done") && userState.getState() == UserState.State.AWAITING_DATE_OPTION) {
            Meeting meeting = meetingService.getMeeting(userState.getMeetingId());
            if (meeting != null && !meeting.getDateOptions().isEmpty()) {
                String response = "–í—Å—Ç—Ä–µ—á–∞ \"" + meeting.getTitle() + "\" —Å–æ–∑–¥–∞–Ω–∞!\n" +
                        "ID –≤—Å—Ç—Ä–µ—á–∏: " + meeting.getId() + "\n\n" +
                        "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç:\n" + formatDateOptions(meeting) + "\n\n" +
                        "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É:\n" +
                        "/vote " + meeting.getId();
                sendMessage(chatId, response);
                meetingService.setUserState(userId, UserState.State.NONE, null);
            } else {
                sendMessage(chatId, "–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º");
            }
        } else if (command.startsWith("/vote ")) {
            String meetingId = command.substring(6).trim();
            Meeting meeting = meetingService.getMeeting(meetingId);
            if (meeting != null) {
                showVotingOptions(chatId, userId, meeting);
                meetingService.setUserState(userId, UserState.State.AWAITING_VOTE, meetingId);
            } else {
                sendMessage(chatId, "–í—Å—Ç—Ä–µ—á–∞ —Å ID " + meetingId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            }
        } else if (command.startsWith("/results ")) {
            String meetingId = command.substring(9).trim();
            showMeetingResults(chatId, meetingId);
        } else {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void handleMessageByState(long chatId, String userId, String username, String messageText, UserState userState) {
        switch (userState.getState()) {
            case AWAITING_MEETING_TITLE:
                Meeting meeting = meetingService.createMeeting(messageText, userId);
                sendMessage(chatId, "–í—Å—Ç—Ä–µ—á–∞ \"" + messageText + "\" —Å–æ–∑–¥–∞–µ—Ç—Å—è.\n\n" +
                        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º\n" +
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 18:30\n\n" +
                        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done");
                meetingService.setUserState(userId, UserState.State.AWAITING_DATE_OPTION, meeting.getId());
                break;

            case AWAITING_DATE_OPTION:
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
                    LocalDateTime dateTime = LocalDateTime.parse(messageText, formatter);

                    meetingService.addDateOption(userState.getMeetingId(), dateTime);
                    sendMessage(chatId, "–í–∞—Ä–∏–∞–Ω—Ç –¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω: " + messageText + "\n" +
                            "–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");
                } catch (DateTimeParseException e) {
                    sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º\n" +
                            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 18:30");
                }
                break;

            default:
                sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
                break;
        }
    }

    private void handleCallback(long chatId, String userId, String username, String callbackData) {
        if (callbackData.startsWith("vote_")) {
            String[] parts = callbackData.split("_");
            if (parts.length == 3) {
                String meetingId = parts[1];
                String optionId = parts[2];

                meetingService.addVote(meetingId, optionId, userId, username);

                Meeting meeting = meetingService.getMeeting(meetingId);
                if (meeting != null) {
                    sendMessage(chatId, "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!\n\n–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + formatVotingResults(meeting));
                }
            }
        }
    }

    private void showUserMeetings(long chatId, String userId) {
        List<Meeting> meetings = meetingService.getMeetingsByCreator(userId);

        if (meetings.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.");
            return;
        }

        StringBuilder sb = new StringBuilder("–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n\n");
        for (Meeting meeting : meetings) {
            sb.append("üìÖ \"").append(meeting.getTitle()).append("\"\n");
            sb.append("ID: ").append(meeting.getId()).append("\n");
            sb.append("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç: ").append(meeting.getDateOptions().size()).append("\n");
            sb.append("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ").append(meeting.getParticipants().size()).append("\n");
            sb.append("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: /results ").append(meeting.getId()).append("\n\n");
        }

        sendMessage(chatId, sb.toString());
    }

    private void showVotingOptions(long chatId, String userId, Meeting meeting) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—Å—Ç—Ä–µ—á–∞: \"" + meeting.getTitle() + "\"\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç—ã:");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        for (DateOption option : meeting.getDateOptions()) {
            List<InlineKeyboardButton> rowInline = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();

            button.setText(option.getFormattedDateTime());
            button.setCallbackData("vote_" + meeting.getId() + "_" + option.getId());

            rowInline.add(button);
            rowsInline.add(rowInline);
        }

        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void showMeetingResults(long chatId, String meetingId) {
        Meeting meeting = meetingService.getMeeting(meetingId);
        if (meeting == null) {
            sendMessage(chatId, "–í—Å—Ç—Ä–µ—á–∞ —Å ID " + meetingId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        DateOption bestOption = meetingService.getBestOption(meetingId);

        StringBuilder sb = new StringBuilder();
        sb.append("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å—Ç—Ä–µ—á–∏ \"").append(meeting.getTitle()).append("\":\n\n");
        sb.append(formatVotingResults(meeting)).append("\n\n");

        if (bestOption != null) {
            sb.append("üèÜ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: ").append(bestOption.getFormattedDateTime());
            sb.append(" (").append(bestOption.getVotes().size()).append(" –≥–æ–ª–æ—Å–æ–≤)");
        } else {
            sb.append("–ü–æ–∫–∞ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤.");
        }

        sendMessage(chatId, sb.toString());
    }

    private String formatDateOptions(Meeting meeting) {
        return meeting.getDateOptions().stream()
                .map(DateOption::getFormattedDateTime)
                .collect(Collectors.joining("\n"));
    }

    private String formatVotingResults(Meeting meeting) {
        StringBuilder sb = new StringBuilder();

        for (DateOption option : meeting.getDateOptions()) {
            sb.append(option.getFormattedDateTime());
            sb.append(" - ").append(option.getVotes().size()).append(" –≥–æ–ª–æ—Å–æ–≤");

            if (!option.getVotes().isEmpty()) {
                sb.append(" (");
                List<String> voterNames = option.getVotes().stream()
                        .map(voterId -> meeting.getParticipants().get(voterId))
                        .filter(user -> user != null)
                        .map(user -> user.getUsername() != null ? user.getUsername() : "User")
                        .collect(Collectors.toList());
                sb.append(String.join(", ", voterNames));
                sb.append(")");
            }

            sb.append("\n");
        }

        return sb.toString();
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
